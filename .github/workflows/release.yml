name: Release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*.*.*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  SOLUTION_FILE: src/azureAD-groups-exporter/azureAD-groups-exporter.sln
  PUBLISH_FOLDER: publish
  RELEASE_NAME: azureAD-groups-exporter
  WINDOWS_PACKAGE_NAME: azureAD-groups-exporter-windows
  LINUX_PACKAGE_NAME: azureAD-groups-exporter-linux
  MACOS_PACKAGE_NAME: azureAD-groups-exporter-macos

jobs:

  build_windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Extract tag name
      id: tag
      uses: actions/github-script@0.2.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          return context.payload.ref.replace(/\/refs\/tags\//, '');
    - name: Echo
      run: echo ${{ steps.tag.outputs.result }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_FILE }} --output ${{ env.PUBLISH_FOLDER }} --configuration Release --version-suffix ${{ steps.tag.outputs.result }}
    - name: Zip Release Windows
      run: cd ${{ env.PUBLISH_FOLDER }} && tar.exe -a -c -f ${{ env.WINDOWS_PACKAGE_NAME }}.zip *.exe *.dll *.json Template/*.* -C ${{ env.PUBLISH_FOLDER }} && cd ..    
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.WINDOWS_PACKAGE_NAME }}
        path: ${{ env.PUBLISH_FOLDER }}/${{ env.WINDOWS_PACKAGE_NAME }}.zip

  build_linux:
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_FILE }} --output ${{ env.PUBLISH_FOLDER }} --configuration Release --version-suffix ${{ github.ref }}
    - name: Zip Release Linux
      run: cd ${{ env.PUBLISH_FOLDER }} && zip ${{ env.LINUX_PACKAGE_NAME }}.zip * -r && cd ..
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.LINUX_PACKAGE_NAME }}
        path: ${{ env.PUBLISH_FOLDER }}/${{ env.LINUX_PACKAGE_NAME }}.zip

  build_macos:
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_FILE }} --output ${{ env.PUBLISH_FOLDER }} --configuration Release --version-suffix ${{ github.ref }}
    - name: Zip Release MacOs
      run: cd ${{ env.PUBLISH_FOLDER }} && zip ${{ env.MACOS_PACKAGE_NAME }}.zip * -r && cd ..
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.MACOS_PACKAGE_NAME }}
        path: ${{ env.PUBLISH_FOLDER }}/${{ env.MACOS_PACKAGE_NAME }}.zip

  create_release_and_publish_artifacts:
    needs: [build_windows,build_linux,build_macos]
    runs-on: windows-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.WINDOWS_PACKAGE_NAME }}
        path: ${{ env.PUBLISH_FOLDER }}
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.LINUX_PACKAGE_NAME }}
        path: ${{ env.PUBLISH_FOLDER }}
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.MACOS_PACKAGE_NAME }}
        path: ${{ env.PUBLISH_FOLDER }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ env.RELEASE_NAME }}-${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset - Windows
      id: upload-release-asset-windows 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ env.PUBLISH_FOLDER }}/${{ env.WINDOWS_PACKAGE_NAME }}.zip
        asset_name: ${{ env.WINDOWS_PACKAGE_NAME }}.zip
        asset_content_type: application/zip
    - name: Upload Release Asset - Linux
      id: upload-release-asset-linux 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ env.PUBLISH_FOLDER }}/${{ env.LINUX_PACKAGE_NAME }}.zip
        asset_name: ${{ env.LINUX_PACKAGE_NAME }}.zip
        asset_content_type: application/zip
    - name: Upload Release Asset - MacOs
      id: upload-release-asset-macos 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ env.PUBLISH_FOLDER }}/${{ env.MACOS_PACKAGE_NAME }}.zip
        asset_name: ${{ env.MACOS_PACKAGE_NAME }}.zip
        asset_content_type: application/zip